<div class="modal fade" id="AgregarMeta" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Agregar nueva meta</h5>
                <button class="boton-cerrar"@onclick="Cancelar">
                    <span class="bi bi-x-lg"></span>
                </button>
            </div>
            <EditForm Model="@meta" OnValidSubmit="Aceptar">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <!-- Agrupa el label y el input en un bloque vertical -->
                                <label for="nombre" class="form-label">Nombre:</label> <!-- Form-label para alineación estándar -->
                                <InputText type="text" id="nombre" class="form-control" @bind-Value="meta.Nombre" />
                                <ValidationMessage For="@(() => meta.Nombre)" class="text-danger" /> <!-- Mensaje de validación debajo del input -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer d-flex justify-content-center align-items-center">
                    <button type="submit" class="btn btn-gestion mr-4">Aceptar</button>
                    <button type="button" class="btn btn-light ml-4" @onclick="Cancelar">Cancelar</button>
                </div>

            </EditForm>

        </div>
    </div>
</div>

@code {
    public MetaMod meta = new MetaMod();
    private EditContext editContext;

    [Parameter] public EventCallback OnSuccess { get; set; }

    public async Task CargarInformacion()
    {
        try
        {
            var resultsMeta = await Http.GetStringAsync("Meta/Obtener/" + meta.IdMeta);
            meta = JsonConvert.DeserializeObject<MetaMod>(resultsMeta) ?? new MetaMod();
        }
        catch (Exception ex)
        {
            toastService.ShowToast(ToastLevel.Error, "Ha ocurrido un error: " + ex.Message);
        }

    }

    public async Task ShowModalAsync(int metaId)
    {
        editContext = new EditContext(meta);

        if (metaId == 0)
        {
            meta = new MetaMod();
        }
        else
        {
            meta.IdMeta = metaId;
            await CargarInformacion();
        }
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openModal", "#AgregarMeta");
    }

    public async Task HideModalAsync()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "#AgregarMeta");
    }

    MetasConsulta metasConsulta;

    private async Task Aceptar()
    {
        try
        {
            var resultsMetas = await Http.PostAsJsonAsync("Meta/Guardar", meta);

            // Obtener el mensaje de error del cuerpo de la respuesta
            var message = await resultsMetas.Content.ReadAsStringAsync();

            if (!resultsMetas.IsSuccessStatusCode)
            {
                // Lanzar una excepción con el mensaje de error
                throw new Exception(message);
            }

            if (OnSuccess.HasDelegate)
            {
                await OnSuccess.InvokeAsync();
            }

            await HideModalAsync();

            toastService.ShowSuccess(message);
        }
        catch (Exception ex)
        {
            toastService.ShowToast(ToastLevel.Error, "Ha ocurrido un error: " + ex.Message);
        }
        
        StateHasChanged();
    }

    private async Task Cancelar()
    {
        await HideModalAsync();
    }
}
