@using System.Text

<div class="modal fade" id="CompletarTarea" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">¿Está seguro?</h5>
                <button class="boton-cerrar" @onclick="Cancelar">
                    <span class="bi bi-x-lg"></span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <div>
                            <label for="nombre" class="me-2">Que desea eliminar los siguientes elementos:</label>
                            @foreach (var tarea in tareas)
                            {
                                <li>@tarea.Nombre</li>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-center align-items-center">
                <button type="button" class="btn btn-gestion mr-4" @onclick="Aceptar">Aceptar</button>
                <button type="button" class="btn btn-light ml-4" @onclick="Cancelar">Cancelar</button>
            </div>
        </div>
    </div>
</div>

@code {
    public List<TareaView> tareas = new List<TareaView>();


    [Parameter] public EventCallback OnSuccess { get; set; }

    public async Task ShowModalAsync(List<TareaView> listTareas)
    {
        tareas = listTareas.Where(x => x.seleccionado).ToList();
        await JSRuntime.InvokeVoidAsync("openModal", "#CompletarTarea");
    }

    public async Task HideModalAsync()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "#CompletarTarea");
    }

    MetasConsulta metasConsulta;

    private async Task Aceptar()
    {
        try
        {

            var content = new StringContent(JsonConvert.SerializeObject(tareas), Encoding.UTF8, "application/json");

            // Crea una solicitud DELETE con el contenido JSON
            var request = new HttpRequestMessage(HttpMethod.Post, "Tarea/CompletarTareas")
                {
                    Content = content
                };

            // Envía la solicitud
            var resultsTareas = await Http.SendAsync(request);

            var message = await resultsTareas.Content.ReadAsStringAsync();

            if (!resultsTareas.IsSuccessStatusCode)
            {
                // Lanzar una excepción con el mensaje de error
                throw new Exception(message);
            }

            if (OnSuccess.HasDelegate)
            {
                await OnSuccess.InvokeAsync();
            }

            await HideModalAsync();

            toastService.ShowSuccess(message);
        }
        catch (Exception ex)
        {
            toastService.ShowToast(ToastLevel.Error, "Ha ocurrido un error: " + ex.Message);
        }

        StateHasChanged();
    }

    private async Task Cancelar()
    {
        await HideModalAsync();
    }
}

