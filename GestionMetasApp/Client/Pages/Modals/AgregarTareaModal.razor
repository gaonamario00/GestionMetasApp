<div class="modal fade" id="AgregarTarea" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Agregar nueva tarea</h5>
                <button class="boton-cerrar" @onclick="Cancelar">
                    <span class="bi bi-x-lg"></span>
                </button>
            </div>
            <EditForm Model="@tarea" OnValidSubmit="Aceptar">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="nombre" class="form-label">Nombre:</label> 
                                <InputText type="text" id="nombre" class="form-control" @bind-Value="tarea.Nombre" />
                                <ValidationMessage For="@(() => tarea.Nombre)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer d-flex justify-content-center align-items-center">
                    <button type="submit" class="btn btn-gestion mr-4">Aceptar</button>
                    <button type="button" class="btn btn-light ml-4" @onclick="Cancelar">Cancelar</button>
                </div>

            </EditForm>

        </div>
    </div>
</div>

@code {
    public TareaMod tarea = new TareaMod();
    private EditContext editContext;

    [Parameter] public EventCallback OnSuccess { get; set; }

    public async Task CargarInformacion()
    {
        try
        {
            var resultsTarea = await Http.GetStringAsync("Tarea/Obtener/" + tarea.IdTarea);
            tarea = JsonConvert.DeserializeObject<TareaMod>(resultsTarea) ?? new TareaMod();
        }
        catch (Exception ex)
        {
            toastService.ShowToast(ToastLevel.Error, "Ha ocurrido un error: " + ex.Message);
        }

    }

    public async Task ShowModalAsync(int tareaId, int metaId)
    {
        editContext = new EditContext(tarea);

        if (tareaId == 0)
        {
            tarea = new TareaMod();
            tarea.IdMeta = metaId;
        }
        else
        {
            tarea.IdTarea = tareaId;
            await CargarInformacion();
        }
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("openModal", "#AgregarTarea");
    }

    public async Task HideModalAsync()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "#AgregarTarea");
    }

    private async Task Aceptar()
    {
        try
        {
            var resultsTareas = await Http.PostAsJsonAsync("Tarea/Guardar", tarea);

            // Obtener el mensaje de error del cuerpo de la respuesta
            var message = await resultsTareas.Content.ReadAsStringAsync();

            if (!resultsTareas.IsSuccessStatusCode)
            {
                // Lanzar una excepción con el mensaje de error
                throw new Exception(message);
            }

            if (OnSuccess.HasDelegate)
            {
                await OnSuccess.InvokeAsync();
            }

            await HideModalAsync();

            toastService.ShowSuccess(message);
        }
        catch (Exception ex)
        {
            toastService.ShowToast(ToastLevel.Error, "Ha ocurrido un error: " + ex.Message);
        }

        StateHasChanged();
    }

    private async Task Cancelar()
    {
        await HideModalAsync();
    }
}